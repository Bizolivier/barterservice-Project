// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Models;

namespace barterserv.Migrations
{
    [DbContext(typeof(BarterContext))]
    [Migration("20210926094017_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("backend.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Aide à la personne"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Beauté bien être"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Bricolage"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Cours"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Loisirs"
                        },
                        new
                        {
                            CategoryId = 6,
                            Name = "Maison"
                        },
                        new
                        {
                            CategoryId = 7,
                            Name = "Mode"
                        },
                        new
                        {
                            CategoryId = 8,
                            Name = "Travail"
                        },
                        new
                        {
                            CategoryId = 9,
                            Name = "Vacances"
                        },
                        new
                        {
                            CategoryId = 10,
                            Name = "Vehicule"
                        });
                });

            modelBuilder.Entity("backend.Models.Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("UserId1")
                        .HasColumnType("int");

                    b.Property<int>("UserId2")
                        .HasColumnType("int");

                    b.HasKey("ChatId");

                    b.HasIndex("UserId1");

                    b.HasIndex("UserId2");

                    b.ToTable("Chats");

                    b.HasData(
                        new
                        {
                            ChatId = 1,
                            UserId1 = 7,
                            UserId2 = 8
                        });
                });

            modelBuilder.Entity("backend.Models.Comment", b =>
                {
                    b.Property<int>("CmntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceLinkedToId")
                        .HasColumnType("int");

                    b.HasKey("CmntId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("ServiceLinkedToId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CmntId = 1,
                            AuthorId = 7,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Très satisfait du service rendu,je recommande",
                            Rating = 4f,
                            ReceiverId = 8,
                            ServiceLinkedToId = 3
                        },
                        new
                        {
                            CmntId = 2,
                            AuthorId = 7,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Prestation excellente ,vraiment au dessus de nos attentes.Je recommande à 100%",
                            Rating = 5f,
                            ReceiverId = 8,
                            ServiceLinkedToId = 3
                        },
                        new
                        {
                            CmntId = 3,
                            AuthorId = 3,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Médiocre",
                            Rating = 1f,
                            ReceiverId = 8,
                            ServiceLinkedToId = 1
                        },
                        new
                        {
                            CmntId = 4,
                            AuthorId = 2,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "peu recommandable",
                            Rating = 1f,
                            ReceiverId = 8,
                            ServiceLinkedToId = 1
                        },
                        new
                        {
                            CmntId = 5,
                            AuthorId = 4,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Reussit",
                            Rating = 3f,
                            ReceiverId = 8,
                            ServiceLinkedToId = 2
                        },
                        new
                        {
                            CmntId = 6,
                            AuthorId = 4,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "peu mieux faire",
                            Rating = 3f,
                            ReceiverId = 8,
                            ServiceLinkedToId = 4
                        },
                        new
                        {
                            CmntId = 7,
                            AuthorId = 5,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Recomandable",
                            Rating = 4f,
                            ReceiverId = 8,
                            ServiceLinkedToId = 5
                        },
                        new
                        {
                            CmntId = 8,
                            AuthorId = 6,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Prestation excellente ",
                            Rating = 5f,
                            ReceiverId = 8,
                            ServiceLinkedToId = 6
                        },
                        new
                        {
                            CmntId = 9,
                            AuthorId = 7,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "je recommande",
                            Rating = 4f,
                            ReceiverId = 8,
                            ServiceLinkedToId = 7
                        },
                        new
                        {
                            CmntId = 10,
                            AuthorId = 9,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "vraiment au dessus de nos attentes",
                            Rating = 5f,
                            ReceiverId = 1,
                            ServiceLinkedToId = 8
                        },
                        new
                        {
                            CmntId = 11,
                            AuthorId = 9,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Très satisfait",
                            Rating = 5f,
                            ReceiverId = 1,
                            ServiceLinkedToId = 9
                        },
                        new
                        {
                            CmntId = 12,
                            AuthorId = 1,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Je recommande à 100%",
                            Rating = 5f,
                            ReceiverId = 2,
                            ServiceLinkedToId = 10
                        },
                        new
                        {
                            CmntId = 13,
                            AuthorId = 3,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "service rendu excellent",
                            Rating = 4f,
                            ReceiverId = 2,
                            ServiceLinkedToId = 11
                        },
                        new
                        {
                            CmntId = 14,
                            AuthorId = 4,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Prestation à recommande à 100%",
                            Rating = 5f,
                            ReceiverId = 2,
                            ServiceLinkedToId = 12
                        },
                        new
                        {
                            CmntId = 15,
                            AuthorId = 5,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Très bien fait",
                            Rating = 4f,
                            ReceiverId = 3,
                            ServiceLinkedToId = 13
                        },
                        new
                        {
                            CmntId = 16,
                            AuthorId = 6,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = " Nos attente non pas étaient déçues",
                            Rating = 5f,
                            ReceiverId = 3,
                            ServiceLinkedToId = 14
                        },
                        new
                        {
                            CmntId = 17,
                            AuthorId = 7,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A recommande",
                            Rating = 4f,
                            ReceiverId = 3,
                            ServiceLinkedToId = 15
                        },
                        new
                        {
                            CmntId = 18,
                            AuthorId = 8,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Prestation moyenne",
                            Rating = 3f,
                            ReceiverId = 4,
                            ServiceLinkedToId = 16
                        },
                        new
                        {
                            CmntId = 19,
                            AuthorId = 9,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Très mitigé",
                            Rating = 2f,
                            ReceiverId = 4,
                            ServiceLinkedToId = 17
                        },
                        new
                        {
                            CmntId = 20,
                            AuthorId = 2,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Trés amateur hélas!!",
                            Rating = 1f,
                            ReceiverId = 4,
                            ServiceLinkedToId = 18
                        },
                        new
                        {
                            CmntId = 21,
                            AuthorId = 6,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Prester apres 2 rdv ,mais bien executé",
                            Rating = 3f,
                            ReceiverId = 5,
                            ServiceLinkedToId = 19
                        },
                        new
                        {
                            CmntId = 22,
                            AuthorId = 7,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "probleme de retard à l heure convenue ,mais prestation super",
                            Rating = 4f,
                            ReceiverId = 5,
                            ServiceLinkedToId = 20
                        },
                        new
                        {
                            CmntId = 23,
                            AuthorId = 1,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = " Satisfait ",
                            Rating = 3f,
                            ReceiverId = 5,
                            ServiceLinkedToId = 21
                        },
                        new
                        {
                            CmntId = 24,
                            AuthorId = 8,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Rien de pas ordinnaire",
                            Rating = 3f,
                            ReceiverId = 6,
                            ServiceLinkedToId = 22
                        },
                        new
                        {
                            CmntId = 25,
                            AuthorId = 9,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Service minimum",
                            Rating = 2f,
                            ReceiverId = 6,
                            ServiceLinkedToId = 23
                        },
                        new
                        {
                            CmntId = 26,
                            AuthorId = 5,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Passable",
                            Rating = 3f,
                            ReceiverId = 6,
                            ServiceLinkedToId = 24
                        });
                });

            modelBuilder.Entity("backend.Models.Message", b =>
                {
                    b.Property<int>("MsgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("varchar(140) CHARACTER SET utf8mb4")
                        .HasMaxLength(140);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("MsgId");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            MsgId = 1,
                            ChatId = 1,
                            Content = "salut Mo ",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SenderId = 8
                        },
                        new
                        {
                            MsgId = 2,
                            ChatId = 1,
                            Content = "Alors l'Olive çà? ",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SenderId = 7
                        });
                });

            modelBuilder.Entity("backend.Models.Offer", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.HasKey("OfferId");

                    b.HasIndex("AuthorId")
                        .IsUnique();

                    b.ToTable("Offers");

                    b.HasData(
                        new
                        {
                            OfferId = 1,
                            AuthorId = 1
                        },
                        new
                        {
                            OfferId = 2,
                            AuthorId = 2
                        },
                        new
                        {
                            OfferId = 3,
                            AuthorId = 3
                        },
                        new
                        {
                            OfferId = 4,
                            AuthorId = 4
                        },
                        new
                        {
                            OfferId = 5,
                            AuthorId = 5
                        },
                        new
                        {
                            OfferId = 6,
                            AuthorId = 6
                        },
                        new
                        {
                            OfferId = 7,
                            AuthorId = 7
                        },
                        new
                        {
                            OfferId = 8,
                            AuthorId = 8
                        },
                        new
                        {
                            OfferId = 9,
                            AuthorId = 9
                        });
                });

            modelBuilder.Entity("backend.Models.Prestation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Etat")
                        .HasColumnType("int");

                    b.Property<int>("IdServiceProvided")
                        .HasColumnType("int");

                    b.Property<int>("IdUserClient")
                        .HasColumnType("int");

                    b.Property<int>("IdUserProvider")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Prestations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Etat = 0,
                            IdServiceProvided = 1,
                            IdUserClient = 7,
                            IdUserProvider = 8
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Etat = 0,
                            IdServiceProvided = 10,
                            IdUserClient = 4,
                            IdUserProvider = 2
                        });
                });

            modelBuilder.Entity("backend.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryLinkToId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRecherche")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OfferLinkedtoServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ServiceId");

                    b.HasIndex("CategoryLinkToId");

                    b.HasIndex("OfferLinkedtoServiceId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            ServiceId = 1,
                            CategoryLinkToId = 2,
                            IsRecherche = true,
                            OfferLinkedtoServiceId = 8,
                            Title = "Massage"
                        },
                        new
                        {
                            ServiceId = 2,
                            CategoryLinkToId = 3,
                            IsRecherche = true,
                            OfferLinkedtoServiceId = 8,
                            Title = "Electricité"
                        },
                        new
                        {
                            ServiceId = 3,
                            CategoryLinkToId = 10,
                            IsRecherche = true,
                            OfferLinkedtoServiceId = 8,
                            Title = "Entretien"
                        },
                        new
                        {
                            ServiceId = 4,
                            CategoryLinkToId = 4,
                            IsRecherche = true,
                            OfferLinkedtoServiceId = 8,
                            Title = "cours dotnet"
                        },
                        new
                        {
                            ServiceId = 5,
                            CategoryLinkToId = 6,
                            IsRecherche = false,
                            OfferLinkedtoServiceId = 8,
                            Title = "Jardinage"
                        },
                        new
                        {
                            ServiceId = 6,
                            CategoryLinkToId = 10,
                            IsRecherche = false,
                            OfferLinkedtoServiceId = 8,
                            Title = "Co Voiturage"
                        },
                        new
                        {
                            ServiceId = 7,
                            CategoryLinkToId = 9,
                            IsRecherche = false,
                            OfferLinkedtoServiceId = 8,
                            Title = "Hébergement"
                        },
                        new
                        {
                            ServiceId = 8,
                            CategoryLinkToId = 8,
                            IsRecherche = false,
                            OfferLinkedtoServiceId = 1,
                            Title = "archivage"
                        },
                        new
                        {
                            ServiceId = 9,
                            CategoryLinkToId = 9,
                            IsRecherche = true,
                            OfferLinkedtoServiceId = 1,
                            Title = "camping"
                        },
                        new
                        {
                            ServiceId = 10,
                            CategoryLinkToId = 3,
                            IsRecherche = false,
                            OfferLinkedtoServiceId = 2,
                            Title = "maçonerie"
                        },
                        new
                        {
                            ServiceId = 11,
                            CategoryLinkToId = 1,
                            IsRecherche = true,
                            OfferLinkedtoServiceId = 2,
                            Title = "Repassage"
                        },
                        new
                        {
                            ServiceId = 12,
                            CategoryLinkToId = 8,
                            IsRecherche = false,
                            OfferLinkedtoServiceId = 2,
                            Title = "traduction"
                        },
                        new
                        {
                            ServiceId = 13,
                            CategoryLinkToId = 6,
                            IsRecherche = false,
                            OfferLinkedtoServiceId = 3,
                            Title = "colocation"
                        },
                        new
                        {
                            ServiceId = 14,
                            CategoryLinkToId = 6,
                            IsRecherche = true,
                            OfferLinkedtoServiceId = 3,
                            Title = "Decoration"
                        },
                        new
                        {
                            ServiceId = 15,
                            CategoryLinkToId = 6,
                            IsRecherche = false,
                            OfferLinkedtoServiceId = 3,
                            Title = "gardiennage"
                        },
                        new
                        {
                            ServiceId = 16,
                            CategoryLinkToId = 3,
                            IsRecherche = false,
                            OfferLinkedtoServiceId = 4,
                            Title = "plomberie"
                        },
                        new
                        {
                            ServiceId = 17,
                            CategoryLinkToId = 3,
                            IsRecherche = true,
                            OfferLinkedtoServiceId = 4,
                            Title = "tapisserie"
                        },
                        new
                        {
                            ServiceId = 18,
                            CategoryLinkToId = 3,
                            IsRecherche = false,
                            OfferLinkedtoServiceId = 4,
                            Title = "outillage"
                        },
                        new
                        {
                            ServiceId = 19,
                            CategoryLinkToId = 1,
                            IsRecherche = false,
                            OfferLinkedtoServiceId = 5,
                            Title = "promenade animaux"
                        },
                        new
                        {
                            ServiceId = 20,
                            CategoryLinkToId = 1,
                            IsRecherche = true,
                            OfferLinkedtoServiceId = 5,
                            Title = "ménage"
                        },
                        new
                        {
                            ServiceId = 21,
                            CategoryLinkToId = 1,
                            IsRecherche = false,
                            OfferLinkedtoServiceId = 5,
                            Title = "lecture"
                        },
                        new
                        {
                            ServiceId = 22,
                            CategoryLinkToId = 3,
                            IsRecherche = false,
                            OfferLinkedtoServiceId = 6,
                            Title = "maçonerie"
                        },
                        new
                        {
                            ServiceId = 23,
                            CategoryLinkToId = 1,
                            IsRecherche = true,
                            OfferLinkedtoServiceId = 6,
                            Title = "Repassage"
                        },
                        new
                        {
                            ServiceId = 24,
                            CategoryLinkToId = 8,
                            IsRecherche = false,
                            OfferLinkedtoServiceId = 6,
                            Title = "traduction"
                        },
                        new
                        {
                            ServiceId = 25,
                            CategoryLinkToId = 6,
                            IsRecherche = false,
                            OfferLinkedtoServiceId = 7,
                            Title = "colocation"
                        },
                        new
                        {
                            ServiceId = 26,
                            CategoryLinkToId = 6,
                            IsRecherche = true,
                            OfferLinkedtoServiceId = 7,
                            Title = "Decoration"
                        },
                        new
                        {
                            ServiceId = 27,
                            CategoryLinkToId = 6,
                            IsRecherche = false,
                            OfferLinkedtoServiceId = 7,
                            Title = "gardiennage"
                        },
                        new
                        {
                            ServiceId = 28,
                            CategoryLinkToId = 3,
                            IsRecherche = false,
                            OfferLinkedtoServiceId = 8,
                            Title = "plomberie"
                        },
                        new
                        {
                            ServiceId = 29,
                            CategoryLinkToId = 3,
                            IsRecherche = true,
                            OfferLinkedtoServiceId = 8,
                            Title = "tapisserie"
                        },
                        new
                        {
                            ServiceId = 30,
                            CategoryLinkToId = 3,
                            IsRecherche = false,
                            OfferLinkedtoServiceId = 8,
                            Title = "outillage"
                        },
                        new
                        {
                            ServiceId = 31,
                            CategoryLinkToId = 1,
                            IsRecherche = false,
                            OfferLinkedtoServiceId = 1,
                            Title = "promenade animaux"
                        },
                        new
                        {
                            ServiceId = 32,
                            CategoryLinkToId = 1,
                            IsRecherche = true,
                            OfferLinkedtoServiceId = 3,
                            Title = "ménage"
                        },
                        new
                        {
                            ServiceId = 33,
                            CategoryLinkToId = 1,
                            IsRecherche = false,
                            OfferLinkedtoServiceId = 4,
                            Title = "lecture"
                        },
                        new
                        {
                            ServiceId = 34,
                            CategoryLinkToId = 6,
                            IsRecherche = false,
                            OfferLinkedtoServiceId = 9,
                            Title = "Jardinage"
                        },
                        new
                        {
                            ServiceId = 35,
                            CategoryLinkToId = 10,
                            IsRecherche = false,
                            OfferLinkedtoServiceId = 9,
                            Title = "Co Voiturage"
                        },
                        new
                        {
                            ServiceId = 36,
                            CategoryLinkToId = 3,
                            IsRecherche = true,
                            OfferLinkedtoServiceId = 9,
                            Title = "Electricité"
                        },
                        new
                        {
                            ServiceId = 37,
                            CategoryLinkToId = 10,
                            IsRecherche = true,
                            OfferLinkedtoServiceId = 9,
                            Title = "Entretien"
                        });
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30);

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30);

                    b.Property<string>("Picture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Province")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Sexe")
                        .HasColumnType("int");

                    b.Property<int>("TimeCredit")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "ben@gmail.com",
                            Fullname = "Penelle",
                            Nickname = "Ben",
                            Picture = "mufassa.jpg",
                            Province = 3,
                            Role = 0,
                            Sexe = 1,
                            TimeCredit = 5
                        },
                        new
                        {
                            UserId = 2,
                            Email = "bruno@gmail.com",
                            Fullname = "Lacroix",
                            Nickname = "Bru",
                            Picture = "pumba.jpg",
                            Province = 0,
                            Role = 0,
                            Sexe = 1,
                            TimeCredit = 5
                        },
                        new
                        {
                            UserId = 3,
                            Email = "aela@gmail.com",
                            Fullname = "Izere",
                            Nickname = "Aela",
                            Picture = "nala.jpg",
                            Province = 8,
                            Role = 0,
                            Sexe = 0,
                            TimeCredit = 5
                        },
                        new
                        {
                            UserId = 4,
                            Email = "luis@gmail.com",
                            Fullname = "Save Lara",
                            Nickname = "Luis",
                            Picture = "scar.jpg",
                            Province = 0,
                            Role = 0,
                            Sexe = 1,
                            TimeCredit = 5
                        },
                        new
                        {
                            UserId = 5,
                            Email = "amin@gmail.com",
                            Fullname = "Gandouz",
                            Nickname = "Amin",
                            Picture = "simba.jpg",
                            Province = 0,
                            Role = 0,
                            Sexe = 1,
                            TimeCredit = 5
                        },
                        new
                        {
                            UserId = 6,
                            Email = "nico@gmail.com",
                            Fullname = "Krstev",
                            Nickname = "Nico",
                            Picture = "rafiki.jpg",
                            Province = 1,
                            Role = 0,
                            Sexe = 1,
                            TimeCredit = 5
                        },
                        new
                        {
                            UserId = 7,
                            Email = "momo@gmail.com",
                            Fullname = "Mohammed Assbai",
                            Nickname = "Momo",
                            Picture = "zazu.jpg",
                            Province = 0,
                            Role = 0,
                            Sexe = 1,
                            TimeCredit = 5
                        },
                        new
                        {
                            UserId = 8,
                            Email = "bizidu@gmail.com",
                            Fullname = "Olivier Bizimungu",
                            Nickname = "L'Olive",
                            Picture = "vautour.jpg",
                            Province = 8,
                            Role = 0,
                            Sexe = 1,
                            TimeCredit = 50
                        },
                        new
                        {
                            UserId = 9,
                            Email = "Ombi@gmail.com",
                            Fullname = "Bizi Ombi",
                            Nickname = "Ombeline",
                            Picture = "timon.png",
                            Province = 0,
                            Role = 0,
                            Sexe = 1,
                            TimeCredit = 5
                        });
                });

            modelBuilder.Entity("backend.Models.Chat", b =>
                {
                    b.HasOne("backend.Models.User", "User1")
                        .WithMany("ChatLinkedToUser1")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User2")
                        .WithMany("ChatLinkedToUser2")
                        .HasForeignKey("UserId2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.Comment", b =>
                {
                    b.HasOne("backend.Models.User", "Author")
                        .WithMany("CommentsOwned")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "Receiver")
                        .WithMany("CommentReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Service", "ServiceLinkedTo")
                        .WithMany("CommentLinkedToService")
                        .HasForeignKey("ServiceLinkedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.Message", b =>
                {
                    b.HasOne("backend.Models.Chat", "chat")
                        .WithMany("MessageLinkedToChat")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "Sender")
                        .WithMany("MessagesSended")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.Offer", b =>
                {
                    b.HasOne("backend.Models.User", "Author")
                        .WithOne("OwnerOffer")
                        .HasForeignKey("backend.Models.Offer", "AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.Service", b =>
                {
                    b.HasOne("backend.Models.Category", "CategoryLinkTo")
                        .WithMany("CategorysServices")
                        .HasForeignKey("CategoryLinkToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Offer", "OfferLinkedtoService")
                        .WithMany("ServicesLinkedToOffer")
                        .HasForeignKey("OfferLinkedtoServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
